http://qmmmsgpackage.msghubtmp.qrun.diasoft.ru/qmmmsgpackage/swagger-ui/#/

Regex для поиска названия схемы
[^/]+$


1. В мапе Content должен содержаться ровно один из этих элементов:
application/json
*/*
text/html

2. В мапе Content НЕ должно быть элементов, которых нет в этом списке:
application/vnd.spring-boot.actuator.v3+json
application/vnd.spring-boot.actuator.v2+json
application/json
*/*
text/html

Если хотя бы одно условие не выполняется, кидаем в лог ошибку

ТЗ:
Функционал программы:
1. По имеющемуся swagger-описанию микросервиса сгенерировать шаблоны тест-кейсов к АПИ-методам микросервиса.
    1.1. Неоходимо генерировать шаблон body запроса.
    1.2. Необходима поддержка многоуровневых body (использовать рекурсивную генерацию).
    1.3. Необходимо генерировать примеры параметров запроса.
    1.4. Генерировать примеры значений в соответствующих полях (например, если число, пишем 0, если строка - String и тд).
    1.5. Реализовать генерацию body только формата json.
    1.6. Опционально: формировать тест-кейсы для проверки всех кодов http, а не только http 200 OK (например, 400 Bad request).
2. Руками заполнить шаблоны и получить файл с тест-кейсами.
3. Выполнить тест-кейсы из файла.
    3.1. Должна быть возможность указывать в файле тест-кейсов адрес микросервиса, логин/пароль/токен авторизации.
    3.2. Результаты сохранить в лог/создать отчет с помощью библиотеки.
    3.3. Опционально: пакетный запуск файлов с тест-кейсами.
    3.4. Опционально: передвать результаты тестирования в отдельный индекс Elastic.
4. Использовать фреймворк Spring! - обязательно, но можно пока релизовывать без него (так как проект уже начат без использовния Spring).

Резюме: должна быть программа, которая по swagger-описанию микросервиса создаст файл с тест-кейсами, который после наполнения правильными данными можно выполнить и получить отчет.

Мысли (декомпозиция ТЗ):
1. Должно быть два проекта:
    - Генератор. Проект генерит шаблон тест-кейсов на основе swagger документации.
    - Экзекьютор. Проект, которые считывает файл и выполняет из него тест-кейсы.
2. Особенности генератора:
    - Научиться считывать api-docs.json. Результат - содержимое api-docs.json преобразовано в экземпляры классов (+).
    - Научиться выводить список методов, для которых будем генерить шаблоны тест-кейсов (+).
    - Научиться находить параметры методов и body (чтобы знать у каких методов они есть, а у каких - нет) (+).
    - В api-docs.json у некоторых body есть ссылка на схему. Научиться по ссылке получать схему (экземпляр класса схем) с описанием структуры body/параметров (+).
    - Реализовать метод, который получив на вход название типа (String, int и тд) возвращает значение - пример данного типа (например, если число, пишем 0, если строка - String и тд) (+).
    - Понять, где могут передаваться значения (в body, в параметрах, еще где-то).
    - Найти в существующем коде места, где эти значения заполняются.
    - По схеме сформировать для body без вложенности шаблон (пока вместо значений типа знаки ?) (+).
    - Научиться обходить Схему рекурсивно. (+)
    - Научиться формировать шаблон body с вложенностью, используя рекурсивный обход Схемы. (+)
    - Имея строку вида /qmmmsgpackage/MsgPackage/v1/{msgPackageId} научиться находить в ней все параметры (обозначены {}). Пусть метод возвращает List. +
    - Имея Map с значениями переменных, надо заменить все переменные в строке вида /qmmmsgpackage/MsgPackage/v1/{msgPackageId} на их значения из Map. +
    - Добиться, чтобы в выходной файле были и шаблон body, и шаблон параматров, и methodPath, methodType, код ожидаемого ответа сервера.
    - По возможности автоматически сформировать шаблон ответа (он тоже должен попасть в выходной файл).
    - Реализовать возможность указывать для каждого тест-кейса как проверять правильность его выполнения. Типы проверок:
        - по http коду;
        - по структуре body;
        - по значениям body;
        - по регулярному выражению (опционально).

3. Особенности экзекьютора:
    - Научиться считывать файл с тест-кейсами (+).
    - Научиться обходить все тест-кейсы и формировать по ним логи (+/-).
    - Научиться отправлять запрос по заданному адресу (+).
    - Научиться отправлять запрос заданного типа (get, put и тд) с body и параметрами.
    - Научиться принимать и выводить http код, тело ответа.
    - Научиться парсить тело ответа.
    - Научиться сравнивать body по структуре и/или значениям.
    - Научиться проверять http код.
    - Научиться выводить результаты в лог.

